Making all in src
make[1]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/src'
make  all-am
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/src'
  CC       H5.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5checksum.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5dbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5system.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5timer.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
In file included from H5timer.c:32:0:
H5timer.c: In function 'H5_timer_get_time_string':
H5private.h:1431:26: warning: 'remainder_sec' may be used uninitialized in this function [-Wmaybe-uninitialized]
     #define HDsprintf    sprintf /*varargs*/
                          ^
H5timer.c:603:12: note: 'remainder_sec' was declared here
     double remainder_sec;
            ^
In file included from H5timer.c:32:0:
H5private.h:1431:26: warning: 'minutes' may be used uninitialized in this function [-Wmaybe-uninitialized]
     #define HDsprintf    sprintf /*varargs*/
                          ^
H5timer.c:602:12: note: 'minutes' was declared here
     double minutes;
            ^
In file included from H5timer.c:32:0:
H5private.h:1431:26: warning: 'hours' may be used uninitialized in this function [-Wmaybe-uninitialized]
     #define HDsprintf    sprintf /*varargs*/
                          ^
H5timer.c:601:12: note: 'hours' was declared here
     double hours;
            ^
In file included from H5timer.c:32:0:
H5private.h:1431:26: warning: 'days' may be used uninitialized in this function [-Wmaybe-uninitialized]
     #define HDsprintf    sprintf /*varargs*/
                          ^
H5timer.c:600:12: note: 'days' was declared here
     double days;
            ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5trace.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5trace.c: In function 'H5_trace':
H5trace.c:244:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             unsigned n = (unsigned)MAX (0, (int)HDstrlen(argname) - 3);
             ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5A.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Abtree2.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Adense.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Adense.c: In function 'H5A__dense_fnd_cb':
H5Adense.c:314:27: warning: initialization discards 'const' qualifier from pointer target type
         H5A_t *old_attr = *user_attr;
                           ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Adeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Aint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Atest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5AC.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5ACdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5ACproxy_entry.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Bcache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Bdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Bdbg.c: In function 'H5B_debug':
H5Bdbg.c:129:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             "Address:", bt->child[u]);
             ^
H5Bdbg.c:135:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       "Left Key:");
                       ^
H5Bdbg.c:137:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             (void)(type->debug_key)(stream, indent + 6, MAX(0, fwidth - 6), H5B_NKEY(bt, shared, u), udata);
             ^
H5Bdbg.c:141:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       "Right Key:");
                       ^
H5Bdbg.c:143:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             (void)(type->debug_key)(stream, indent + 6, MAX (0, fwidth - 6), H5B_NKEY(bt, shared, u + 1), udata);
             ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2cache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2dbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5B2dbg.c: In function 'H5B2__hdr_debug':
H5B2dbg.c:158:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             hdr->node_info[u].max_nrec, hdr->node_info[u].split_nrec, hdr->node_info[u].merge_nrec);
             ^
H5B2dbg.c: In function 'H5B2__int_debug':
H5B2dbg.c:252:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   internal->node_ptrs[u].addr);
                   ^
H5B2dbg.c:257:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   temp_str);
                   ^
H5B2dbg.c:259:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         (void)(type->debug)(stream, indent + 6, MAX (0, fwidth-6), H5B2_INT_NREC(internal, hdr, u), hdr->cb_ctx);
         ^
H5B2dbg.c:268:15: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
               internal->node_ptrs[u].addr);
               ^
H5B2dbg.c: In function 'H5B2__leaf_debug':
H5B2dbg.c:360:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   temp_str);
                   ^
H5B2dbg.c:362:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         (void)(type->debug)(stream, indent + 6, MAX (0, fwidth-6), H5B2_LEAF_NREC(leaf, hdr, u), hdr->cb_ctx);
         ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2hdr.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2int.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5B2int.c: In function 'H5B2__iterate_node':
H5B2int.c:1521:68: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(NULL == (internal = H5B2__protect_internal(hdr, parent, (H5B2_node_ptr_t *)curr_node, depth, FALSE, H5AC__READ_ONLY_FLAG))) /* Casting away const OK -QAK */
                                                                    ^
H5B2int.c:1540:60: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(NULL == (leaf = H5B2__protect_leaf(hdr, parent, (H5B2_node_ptr_t *)curr_node, FALSE, H5AC__READ_ONLY_FLAG)))   /* Casting away const OK -QAK */
                                                            ^
H5B2int.c: In function 'H5B2__delete_node':
H5B2int.c:1630:68: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(NULL == (internal = H5B2__protect_internal(hdr, parent, (H5B2_node_ptr_t *)curr_node, depth, FALSE, H5AC__NO_FLAGS_SET)))   /* Casting away const OK -QAK */
                                                                    ^
H5B2int.c:1647:60: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(NULL == (leaf = H5B2__protect_leaf(hdr, parent, (H5B2_node_ptr_t *)curr_node, FALSE, H5AC__NO_FLAGS_SET)))     /* Casting away const OK -QAK */
                                                            ^
H5B2int.c: In function 'H5B2__node_size':
H5B2int.c:1706:64: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     if(NULL == (internal = H5B2__protect_internal(hdr, parent, (H5B2_node_ptr_t *)curr_node, depth, FALSE, H5AC__READ_ONLY_FLAG)))     /* Casting away const OK -QAK */
                                                                ^
H5B2int.c: In function 'H5B2__update_flush_depend':
H5B2int.c:1808:77: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if(NULL == (child_int = H5B2__protect_internal(hdr, new_parent, (H5B2_node_ptr_t *)node_ptr, (uint16_t)(depth - 1), FALSE, H5AC__NO_FLAGS_SET)))      /* Casting away const OK -QAK */
                                                                             ^
H5B2int.c:1824:74: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if(NULL == (child_leaf = H5B2__protect_leaf(hdr, new_parent, (H5B2_node_ptr_t *)node_ptr, FALSE, H5AC__NO_FLAGS_SET)))    /* Casting away const OK -QAK */
                                                                          ^
H5B2int.c: In function 'H5B2__redistribute2':
H5B2int.c:506:73: warning: assuming signed overflow does not occur when simplifying '/' or '%' to '>>' or '&' [-Wstrict-overflow]
         uint16_t new_right_nrec = (uint16_t)((*left_nrec + *right_nrec) / 2);    /* New number of records for right child */
                                                                         ^
H5B2int.c:557:72: warning: assuming signed overflow does not occur when simplifying '/' or '%' to '>>' or '&' [-Wstrict-overflow]
         uint16_t new_left_nrec = (uint16_t)((*left_nrec + *right_nrec) / 2);    /* New number of records for left child */
                                                                        ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2internal.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2leaf.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2stat.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5B2test.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5C.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5C.c: In function 'H5C_flush_cache':
H5C.c:1212:14: warning: variable 'ignore_protected' set but not used [-Wunused-but-set-variable]
     hbool_t  ignore_protected;
              ^
In file included from H5C.c:82:0:
H5C.c: In function 'H5C__unpin_entry_real':
H5private.h:2130:13: warning: unused variable 'err_occurred' [-Wunused-variable]
     hbool_t err_occurred = FALSE;                                             \
             ^
H5private.h:2350:5: note: in expansion of macro 'FUNC_ENTER_COMMON'
     FUNC_ENTER_COMMON(H5_IS_PKG(FUNC));                                       \
     ^
H5C.c:4359:5: note: in expansion of macro 'FUNC_ENTER_STATIC'
     FUNC_ENTER_STATIC
     ^
H5C.c:4376:1: warning: label 'done' defined but not used [-Wunused-label]
 done:
 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Cdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Cepoch.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Cimage.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Clog.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Clog_json.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Clog_trace.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Cprefetched.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Cquery.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ctag.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ctest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5CS.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5CX.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5D.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dbtree.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dbtree2.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dchunk.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Dchunk.c: In function 'H5D__chunk_io_init':
H5Dchunk.c:1129:60: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     if((file_space_normalized = H5S_hyper_normalize_offset((H5S_t *)file_space, old_offset)) < 0)
                                                            ^
H5Dchunk.c:1166:41: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(H5S_hyper_denormalize_offset((H5S_t *)file_space, old_offset) < 0)       /* (Casting away const OK -QAK) */
                                         ^
H5Dchunk.c: In function 'H5D__create_chunk_map_single':
H5Dchunk.c:1590:26: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     chunk_info->mspace = (H5S_t *)fm->mem_space;
                          ^
H5Dchunk.c: In function 'H5D__create_chunk_file_map_hyper':
H5Dchunk.c:1873:38: warning: passing argument 1 of 'H5S_combine_hyperslab' discards 'const' qualifier from pointer target type
             if(H5S_combine_hyperslab(fm->file_space, H5S_SELECT_AND, coords, NULL, fm->chunk_dim, NULL, &tmp_fchunk) < 0)
                                      ^
In file included from H5Rprivate.h:26:0,
                 from H5Tprivate.h:32,
                 from H5Zprivate.h:28,
                 from H5CXprivate.h:30,
                 from H5Dchunk.c:55:
H5Sprivate.h:313:15: note: expected 'struct H5S_t *' but argument is of type 'const struct H5S_t *'
 H5_DLL herr_t H5S_combine_hyperslab(H5S_t *old_space, H5S_seloper_t op,
               ^
H5Dchunk.c: In function 'H5D__create_chunk_mem_map_hyper':
H5Dchunk.c:2023:30: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         chunk_info->mspace = (H5S_t *)fm->mem_space;
                              ^
H5Dchunk.c: In function 'H5D__create_chunk_mem_map_1d':
H5Dchunk.c:2146:30: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         chunk_info->mspace = (H5S_t *)fm->mem_space;
                              ^
H5Dchunk.c: In function 'H5D__chunk_allocate':
H5Dchunk.c:4433:17: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
                 (void *)pline, (H5MM_free_t)H5D__chunk_mem_xfree, (void *)pline,
                 ^
H5Dchunk.c:4433:67: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
                 (void *)pline, (H5MM_free_t)H5D__chunk_mem_xfree, (void *)pline,
                                                                   ^
H5Dchunk.c:4482:22: warning: assignment discards 'const' qualifier from pointer target type
     idx_info.storage = sc;
                      ^
H5Dchunk.c: In function 'H5D__chunk_copy_cb':
H5Dchunk.c:6159:95: warning: passing argument 5 of 'H5D__chunk_file_alloc' discards 'const' qualifier from pointer target type
     if(H5D__chunk_file_alloc(udata->idx_info_dst, NULL, &udata_dst.chunk_block, &need_insert, udata_dst.common.scaled) < 0)
                                                                                               ^
In file included from H5Dchunk.c:56:0:
H5Dpkg.h:652:15: note: expected 'hsize_t *' but argument is of type 'const hsize_t *'
 H5_DLL herr_t H5D__chunk_file_alloc(const H5D_chk_idx_info_t *idx_info, const H5F_block_t *old_chunk,
               ^
H5Dchunk.c: In function 'H5D__chunk_dest':
H5Dchunk.c:2918:7: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     if(nerrors)
       ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dcompact.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dcontig.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ddbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ddeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dearray.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Defl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dfarray.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dfill.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Dint.c:100:21: warning: size of 'H5D_def_dset' is 4672 bytes [-Wlarger-than=]
 static H5D_shared_t H5D_def_dset;
                     ^
H5Dint.c: In function 'H5D__init_type':
H5Dint.c:563:30: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         dset->shared->type = (H5T_t *)type; /* (Cast away const OK - QAK) */
                              ^
In file included from H5Dint.c:24:0:
H5Dint.c: In function 'H5D_nameof':
H5private.h:2437:5: warning: return discards 'const' qualifier from pointer target type
     return(ret_value);                                                        \
     ^
H5Dint.c:2230:5: note: in expansion of macro 'FUNC_LEAVE_NOAPI'
     FUNC_LEAVE_NOAPI(dataset ? &(dataset->path) : NULL)
     ^
H5Dint.c: In function 'H5D_flush_all':
H5Dint.c:3327:52: warning: passing argument 3 of 'H5I_iterate' discards 'const' qualifier from pointer target type
     if(H5I_iterate(H5I_DATASET, H5D__flush_all_cb, f, FALSE) < 0) /* Casting away const OK -QAK */
                                                    ^
In file included from H5Dint.c:31:0:
H5Iprivate.h:70:15: note: expected 'void *' but argument is of type 'const struct H5F_t *'
 H5_DLL herr_t H5I_iterate(H5I_type_t type, H5I_search_func_t func, void *udata, hbool_t app_ref);
               ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dio.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Dio.c: In function 'H5D__read':
H5Dio.c:524:66: warning: to be safe all intermediate pointers in cast from 'void **' to 'const void **' must be 'const' qualified [-Wcast-qual]
                 (unsigned)H5S_GET_EXTENT_NDIMS(file_space), buf, (const void **)&adj_buf, type_info.dst_type_size) < 0)
                                                                  ^
H5Dio.c: In function 'H5D__write':
H5Dio.c:756:66: warning: to be safe all intermediate pointers in cast from 'void **' to 'const void **' must be 'const' qualified [-Wcast-qual]
                 (unsigned)H5S_GET_EXTENT_NDIMS(file_space), buf, (const void **)&adj_buf, type_info.src_type_size) < 0)
                                                                  ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dlayout.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dnone.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Doh.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dscatgath.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dselect.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dsingle.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dtest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Dvirtual.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5E.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Edeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Eint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Eint.c: In function 'H5E__walk':
H5Eint.c:544:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int)(estack->nused - 1); i >= 0 && ret_value == H5_ITER_CONT; i--) {
                                                     ^
H5Eint.c:574:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int)(estack->nused - 1); i >= 0 && ret_value == H5_ITER_CONT; i--)
                                                     ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EA.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAcache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5EAdbg.c: In function 'H5EA__iblock_debug':
H5EAdbg.c:251:21: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     ((uint8_t *)iblock->elmts) + (hdr->cparam.cls->nat_elmt_size * u)) < 0)
                     ^
H5EAdbg.c:268:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 iblock->dblk_addrs[u]);
                 ^
H5EAdbg.c:284:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 iblock->sblk_addrs[u]);
                 ^
H5EAdbg.c: In function 'H5EA__sblock_debug':
H5EAdbg.c:374:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 sblock->dblk_addrs[u]);
                 ^
H5EAdbg.c: In function 'H5EA__dblock_debug':
H5EAdbg.c:455:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 ((uint8_t *)dblock->elmts) + (hdr->cparam.cls->nat_elmt_size * u)) < 0)
                 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAdblkpage.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAdblock.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAhdr.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAiblock.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAsblock.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAstat.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5EAtest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5F.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Faccum.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fcwfs.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Fdbg.c: In function 'H5F_debug':
H5Fdbg.c:125:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5G__ent_debug(f->shared->sblock->root_ent, stream, indent + 3, MAX(0, fwidth - 3), NULL);
             ^
H5Fdbg.c:140:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5G__ent_debug(&root_ent, stream, indent + 3, MAX(0, fwidth - 3), NULL);
             ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fdeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fefc.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ffake.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fio.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fmount.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fquery.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fsfile.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fspace.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fsuper.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Fsuper_cache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ftest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FA.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FAcache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FAdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5FAdbg.c: In function 'H5FA__dblock_debug':
H5FAdbg.c:251:21: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     if((hdr->cparam.cls->debug)(stream, (indent + 3), MAX(0, (fwidth - 3)), (hsize_t)u, ((uint8_t *)dblk_page->elmts) + (hdr->cparam.cls->nat_elmt_size * u)) < 0)
                     ^
H5FAdbg.c:267:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if((hdr->cparam.cls->debug)(stream, (indent + 3), MAX(0, (fwidth - 3)), (hsize_t)u, ((uint8_t *)dblock->elmts) + (hdr->cparam.cls->nat_elmt_size * u)) < 0)
             ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FAdblock.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FAdblkpage.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FAhdr.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FAint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FAstat.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FAtest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FD.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDcore.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDfamily.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDhdfs.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5FDhdfs.c: In function 'H5Pget_fapl_hdfs':
H5FDhdfs.c:1761:24: warning: unused parameter 'fapl_id' [-Wunused-parameter]
 H5Pget_fapl_hdfs(hid_t fapl_id, H5FD_hdfs_fapl_t *fa_out)
                        ^
H5FDhdfs.c:1761:51: warning: unused parameter 'fa_out' [-Wunused-parameter]
 H5Pget_fapl_hdfs(hid_t fapl_id, H5FD_hdfs_fapl_t *fa_out)
                                                   ^
H5FDhdfs.c: In function 'H5Pset_fapl_hdfs':
H5FDhdfs.c:1775:24: warning: unused parameter 'fapl_id' [-Wunused-parameter]
 H5Pset_fapl_hdfs(hid_t fapl_id, H5FD_hdfs_fapl_t *fa)
                        ^
H5FDhdfs.c:1775:51: warning: unused parameter 'fa' [-Wunused-parameter]
 H5Pset_fapl_hdfs(hid_t fapl_id, H5FD_hdfs_fapl_t *fa)
                                                   ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDlog.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDmulti.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5FDmulti.c: In function 'H5FD_multi_lock':
H5FDmulti.c:1839:7: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     if(nerrors)
       ^
H5FDmulti.c: In function 'open_members':
H5FDmulti.c:1974:8: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     if (nerrors)
        ^
H5FDmulti.c: In function 'H5FD_multi_unlock':
H5FDmulti.c:1876:7: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     if(nerrors)
       ^
H5FDmulti.c: In function 'H5FD_multi_close':
H5FDmulti.c:1100:8: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     if (nerrors)
        ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDsec2.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDspace.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDsplitter.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDstdio.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FDtest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FL.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FO.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FS.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FScache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5FScache.c: In function 'H5FS__cache_sinfo_deserialize':
H5FScache.c:1002:17: warning: variable 'old_tot_sect_count' set but not used [-Wunused-but-set-variable]
         hsize_t old_tot_sect_count;                         /* Total section count from header */
                 ^
H5FScache.c: In function 'H5FS__cache_sinfo_serialize':
H5FScache.c:1235:66: warning: unused parameter 'len' [-Wunused-parameter]
 H5FS__cache_sinfo_serialize(const H5F_t *f, void *_image, size_t len,
                                                                  ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FSdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5FSdbg.c: In function 'H5FS_sects_debug':
H5FSdbg.c:281:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(H5HF_sects_debug(f, client_addr, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
             ^
H5FSdbg.c:286:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(H5MF_sects_debug(f, fs_addr, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
             ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FSint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FSsection.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FSstat.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5FStest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5G.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gbtree2.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gcache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gcompact.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gdense.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gdeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gent.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Gent.c: In function 'H5G__ent_copy':
H5Gent.c:338:24: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         H5G__ent_reset((H5G_entry_t *)src);
                        ^
H5Gent.c: In function 'H5G__ent_debug':
H5Gent.c:542:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     nested_fwidth = MAX(0, fwidth - 3);
     ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Glink.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gloc.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Gloc.c: In function 'H5G__loc_insert':
H5Gloc.c:565:16: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     lnk.name = (char *)name;
                ^
H5Gloc.c: In function 'H5G__loc_set_comment_cb':
H5Gloc.c:775:21: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         comment.s = (char *)udata->comment;
                     ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gname.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Gname.c: In function 'H5G_name_copy':
H5Gname.c:532:24: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         H5G_name_reset((H5G_name_t *)src);
                        ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gnode.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Gnode.c: In function 'H5G_node_remove':
H5Gnode.c:756:22: warning: unused variable 'lt_key' [-Wunused-variable]
     H5G_node_key_t  *lt_key = (H5G_node_key_t *)_lt_key;
                      ^
H5Gnode.c: In function 'H5G__node_copy':
H5Gnode.c:1255:28: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             grp_loc.oloc = (H5O_loc_t *)src_oloc;
                            ^
H5Gnode.c: In function 'H5G_node_debug':
H5Gnode.c:1517:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         fwidth = MAX(0, fwidth - 3);
         ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gobj.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Gobj.c: In function 'H5G__obj_create_real':
H5Gobj.c:264:67: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(H5O_msg_create(oloc, H5O_LINFO_ID, 0, H5O_UPDATE_TIME, (void *)linfo) < 0)
                                                                   ^
H5Gobj.c:269:73: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(H5O_msg_create(oloc, H5O_GINFO_ID, H5O_MSG_FLAG_CONSTANT, 0, (void *)ginfo) < 0)
                                                                         ^
H5Gobj.c:275:77: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if(H5O_msg_create(oloc, H5O_PLINE_ID, H5O_MSG_FLAG_CONSTANT, 0, (void *)pline) < 0)
                                                                             ^
H5Gobj.c: In function 'H5G_obj_stab_to_new_cb':
H5Gobj.c:422:51: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     if(H5G_obj_insert(udata->grp_oloc, lnk->name, (H5O_link_t *)lnk, FALSE, H5O_TYPE_UNKNOWN, NULL) < 0)
                                                   ^
H5Gobj.c: In function 'H5G__obj_info':
H5Gobj.c:735:37: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     if(H5O_loc_copy_deep(&grp_oloc, (H5O_loc_t *)oloc) < 0)
                                     ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Goh.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Groot.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gstab.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gtest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Gtraverse.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Gtraverse.c: In function 'H5G__traverse_real':
H5Gtraverse.c:726:52: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_GINFO_ID, (void *)ginfo) < 0)
                                                    ^
H5Gtraverse.c:730:52: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_LINFO_ID, (void *)linfo) < 0)
                                                    ^
H5Gtraverse.c:734:52: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
                     if(H5O_msg_reset(H5O_PLINE_ID, (void *)pline) < 0)
                                                    ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HF.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HF.c: In function 'H5HF_op_write':
H5HF.c:132:17: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     H5MM_memcpy((void *)obj, op_data, obj_len);    /* Casting away const OK -QAK */
                 ^
H5HF.c: In function 'H5HF_insert':
H5HF.c:371:41: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(H5HF__huge_insert(hdr, size, (void *)obj, id) < 0)
                                         ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFbtree2.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFcache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HFcache.c: In function 'H5HF__cache_hdr_serialize':
H5HFcache.c:770:12: warning: assignment discards 'const' qualifier from pointer target type
     hdr->f = f;
            ^
H5HFcache.c: In function 'H5HF__cache_iblock_serialize':
H5HFcache.c:1360:12: warning: assignment discards 'const' qualifier from pointer target type
     hdr->f = f;
            ^
H5HFcache.c: In function 'H5HF__cache_dblock_verify_chksum':
H5HFcache.c:1689:20: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         read_buf = (void *)image;       /* Casting away const OK - QAK */
                    ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HFdbg.c: In function 'H5HF_hdr_print':
H5HFdbg.c:328:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     H5HF__dtable_debug(&hdr->man_dtable, stream, indent + 3, MAX(0, fwidth - 3));
     ^
H5HFdbg.c:336:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       hdr->pline_root_direct_size);
                       ^
H5HFdbg.c:339:23: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                       hdr->pline_root_direct_filter_mask);
                       ^
H5HFdbg.c:341:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         H5O_debug_id(H5O_PLINE_ID, hdr->f, &(hdr->pline), stream, indent + 3, MAX(0, fwidth - 3));
         ^
H5HFdbg.c:351:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   hdr->root_iblock_flags);
                   ^
H5HFdbg.c:354:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   hdr->root_iblock);
                   ^
H5HFdbg.c: In function 'H5HF_dblock_debug_cb':
H5HFdbg.c:468:3: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
   start, len);
   ^
H5HFdbg.c: In function 'H5HF_iblock_print':
H5HFdbg.c:683:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 temp_str);
                 ^
H5HFdbg.c:693:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->filt_ents[off].filter_mask);
                         ^
H5HFdbg.c:697:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->ents[off].addr);
                         ^
H5HFdbg.c:711:21: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     temp_str);
                     ^
H5HFdbg.c:718:25: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         iblock->ents[off].addr);
                         ^
H5HFdbg.c:724:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   "<none>");
                   ^
H5HFdbg.c:733:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   iblock->rc);
                   ^
H5HFdbg.c:738:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   iblock->parent);
                   ^
H5HFdbg.c: In function 'H5HF_sects_debug_cb':
H5HFdbg.c:845:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if(H5FS_sect_debug(udata->fspace, _sect, udata->stream, udata->indent + 3, MAX(0, udata->fwidth - 3)) < 0)
     ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFdblock.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFdtable.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFhdr.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFhuge.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HFhuge.c: In function 'H5HF__huge_write':
H5HFhuge.c:863:8: warning: 'obj_size' may be used uninitialized in this function [-Wmaybe-uninitialized]
     if(H5F_block_write(hdr->f, H5FD_MEM_FHEAP_HUGE_OBJ, obj_addr, obj_size, obj) < 0)
        ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFiblock.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFiter.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFman.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HFman.c: In function 'H5HF__man_write':
H5HFman.c:500:50: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     if(H5HF__man_op_real(hdr, id, H5HF_op_write, (void *)obj, H5HF_OP_MODIFY) < 0)
                                                  ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFsection.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HFsection.c: In function 'H5HF__sect_row_debug':
H5HFsection.c:2108:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         H5HF_sect_indirect_debug(sect->u.row.under, stream, indent + 3, MAX(0, fwidth - 3));
         ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFspace.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFstat.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFtest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HFtiny.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HG.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HGcache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HGcache.c: In function 'H5HG__cache_heap_get_final_load_size':
H5HGcache.c:225:17: warning: '*((void *)&heap+264)' may be used uninitialized in this function [-Wmaybe-uninitialized]
     *actual_len = heap.size;
                 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HGdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HGdbg.c: In function 'H5HG_debug':
H5HGdbg.c:140:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        (unsigned long)(h->obj[u].begin - h->chunk));
        ^
H5HGdbg.c:143:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        h->obj[u].nrefs);
        ^
H5HGdbg.c:148:8: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
        (unsigned long)H5HG_ALIGN(h->obj[u].size));
        ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HGquery.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HL.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HLcache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HLdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5HLdbg.c: In function 'H5HL_debug':
H5HLdbg.c:91:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         HDfprintf(stream, "%*s%-*s %8Zu, %8Zu\n", indent+3, "", MAX(0,fwidth-9), temp_str, freelist->offset, freelist->size);
         ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HLint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HLprfx.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HLdblk.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5HP.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5I.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5I.c: In function 'H5I__clear_type_cb':
H5I.c:548:81: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(udata->type_ptr->cls->free_func && (udata->type_ptr->cls->free_func)((void *)id->obj_ptr) < 0) { /* (Casting away const OK -QAK) */
                                                                                 ^
In file included from H5I.c:37:0:
H5I.c: In function 'H5I__destroy_type':
H5I.c:654:48: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         type_ptr->cls = H5FL_FREE(H5I_class_t, (void *)type_ptr->cls);
                                                ^
H5FLprivate.h:128:65: note: in definition of macro 'H5FL_FREE'
 #define H5FL_FREE(t,obj) (t *)H5FL_reg_free(&(H5FL_REG_NAME(t)),obj)
                                                                 ^
H5I.c: In function 'H5I_subst':
H5I.c:850:17: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     ret_value = (void *)id_ptr->obj_ptr;        /* (Casting away const OK -QAK) */
                 ^
H5I.c: In function 'H5I_object':
H5I.c:883:21: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         ret_value = (void *)id_ptr->obj_ptr;        /* (Casting away const OK -QAK) */
                     ^
H5I.c: In function 'H5I_object_verify':
H5I.c:952:21: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         ret_value = (void *)id_ptr->obj_ptr;        /* (Casting away const OK -QAK) */
                     ^
H5I.c: In function 'H5I__remove_common':
H5I.c:1125:17: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     ret_value = (void *)curr_id->obj_ptr;       /* (Casting away const OK -QAK) */
                 ^
H5I.c: In function 'H5I_dec_ref':
H5I.c:1261:68: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(!type_ptr->cls->free_func || (type_ptr->cls->free_func)((void *)id_ptr->obj_ptr) >= 0) {
                                                                    ^
H5I.c: In function 'H5I__iterate_cb':
H5I.c:1877:42: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         cb_ret_val = (*udata->user_func)((void *)item->obj_ptr, item->id, udata->user_udata);     /* (Casting away const OK) */
                                          ^
H5I.c: In function 'H5I__id_dump_cb':
H5I.c:2135:31: warning: passing argument 1 of 'H5G_nameof' discards 'const' qualifier from pointer target type
             path = H5G_nameof((const H5G_t *)item->obj_ptr);
                               ^
In file included from H5Tprivate.h:31:0,
                 from H5Zprivate.h:28,
                 from H5CXprivate.h:30,
                 from H5I.c:34:
H5Gprivate.h:190:21: note: expected 'struct H5G_t *' but argument is of type 'const struct H5G_t *'
 H5_DLL H5G_name_t * H5G_nameof(H5G_t *grp);
                     ^
H5I.c: At top level:
H5I.c:125:12: warning: 'H5I__debug_cb' declared 'static' but never defined [-Wunused-function]
 static int H5I__debug_cb(void *_item, void *_key, void *_udata);
            ^
H5I.c: In function 'H5I_term_package':
H5I.c:160:11: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
         if(0 == n) {
           ^
H5I.c:172:15: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
             if(0 == n)
               ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Itest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5L.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5L.c: In function 'H5L__link_cb':
H5L.c:1685:24: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     udata->lnk->name = (char *)name;
                        ^
H5L.c: In function 'H5L__move_dest_cb':
H5L.c:2477:24: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     udata->lnk->name = (char *)name;
                        ^
H5L.c: In function 'H5L__link_copy_file':
H5L.c:3231:28: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         lnk_grp_loc.oloc = (H5O_loc_t *)src_oloc;    /* Casting away const OK -QAK */
                            ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Lexternal.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Lexternal.c: In function 'H5L__extern_traverse':
H5Lexternal.c:201:11: warning: assuming signed overflow does not occur when simplifying conditional [-Wstrict-overflow]
         if((size_t)group_name_len > sizeof(local_group_name)) {
           ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5make_libsettings.o
  CCLD     H5make_libsettings
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo  |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5make_libsettings > H5lib_settings.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5lib_settings.c ; exit 1)
  CC       H5lib_settings.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5lib_settings.c:31:6: warning: size of 'H5libhdf5_settings' is 3797 bytes [-Wlarger-than=]
 char H5libhdf5_settings[]=
      ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5MF.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5MFaggr.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5MFdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5MFdbg.c: In function 'H5MF__sects_debug_cb':
H5MFdbg.c:134:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if(H5FS_sect_debug(udata->fspace, _sect, udata->stream, udata->indent + 3, MAX(0, udata->fwidth - 3)) < 0)
     ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5MFsection.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5MM.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5MP.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5MPtest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5O.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5O.c: In function 'H5Oget_info_by_idx':
H5O.c:1169:17: warning: unused variable 'obj_oloc' [-Wunused-variable]
     H5O_loc_t   obj_oloc;               /* Opened object object location */
                 ^
H5O.c:1168:17: warning: unused variable 'obj_path' [-Wunused-variable]
     H5G_name_t  obj_path;               /* Opened object group hier. path */
                 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Odeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Odeprec.c: In function 'H5Oget_info_by_idx1':
H5Odeprec.c:175:17: warning: unused variable 'obj_oloc' [-Wunused-variable]
     H5O_loc_t   obj_oloc;               /* Opened object object location */
                 ^
H5Odeprec.c:174:17: warning: unused variable 'obj_path' [-Wunused-variable]
     H5G_name_t  obj_path;               /* Opened object group hier. path */
                 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oainfo.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Oainfo.c: In function 'H5O__ainfo_delete':
H5Oainfo.c:333:36: warning: unused parameter 'open_oh' [-Wunused-parameter]
 H5O__ainfo_delete(H5F_t *f, H5O_t *open_oh, void *_mesg)
                                    ^
H5Oainfo.c: In function 'H5O__ainfo_copy_file':
H5Oainfo.c:404:29: warning: unused parameter 'file_src' [-Wunused-parameter]
 H5O__ainfo_copy_file(H5F_t *file_src, void *mesg_src, H5F_t *file_dst,
                             ^
H5Oainfo.c:406:17: warning: unused parameter 'cpy_info' [-Wunused-parameter]
     H5O_copy_t *cpy_info, void H5_ATTR_UNUSED *udata)
                 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oalloc.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Oalloc.c: In function 'H5O_add_gap':
H5Oalloc.c:113:20: warning: unused parameter 'f' [-Wunused-parameter]
 H5O_add_gap(H5F_t *f, H5O_t *oh, unsigned chunkno, hbool_t *chk_dirtied,
                    ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oattr.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Oattr.c: In function 'H5O__attr_debug':
H5Oattr.c:882:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->shared->dt_size));
      ^
H5Oattr.c:883:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if((H5O_MSG_DTYPE->debug)(f, mesg->shared->dt, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
     ^
H5Oattr.c:889:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->shared->ds_size));
      ^
H5Oattr.c:890:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if(H5S_debug(f, mesg->shared->ds, stream, indent + 3, MAX(0, fwidth - 3)) < 0)
     ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oattribute.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Obogus.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Obtreek.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ocache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Ocache.c: In function 'H5O__chunk_deserialize':
H5Ocache.c:1464:25: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             mesg->raw = (uint8_t *)chunk_image;        /* Casting away const OK - QAK */
                         ^
H5Ocache.c: In function 'H5O__chunk_serialize':
H5Ocache.c:1666:30: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if(H5O_msg_flush((H5F_t *)f, oh, curr_msg) < 0)
                              ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ocache_image.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Ocache_image.c: In function 'H5O__mdci_delete':
H5Ocache_image.c:278:35: warning: unused parameter 'open_oh' [-Wunused-parameter]
 H5O__mdci_delete(H5F_t *f, H5O_t *open_oh, void *_mesg)
                                   ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ochunk.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ocont.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ocopy.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Odbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Odbg.c: In function 'H5O_debug_real':
H5Odbg.c:385:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   oh->chunk[i].addr);
                   ^
H5Odbg.c:402:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     chunk_size);
     ^
H5Odbg.c:406:19: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                   oh->chunk[i].gap);
                   ^
H5Odbg.c:437:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     sequence[oh->mesg[i].type->id]++);
     ^
H5Odbg.c:440:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      oh->mesg[i].dirty);
      ^
H5Odbg.c:442:20: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                    "Message flags:");
                    ^
H5Odbg.c:488:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                            oh->mesg[i].flags & ~H5O_MSG_FLAG_BITS);
                            ^
H5Odbg.c:495:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     oh->mesg[i].chunkno);
     ^
H5Odbg.c:502:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     oh->mesg[i].raw_size);
     ^
H5Odbg.c:517:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     "Message Information:");
     ^
H5Odbg.c:519:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             (debug_type->debug)(f, oh->mesg[i].native, stream, indent + 6, MAX(0, fwidth - 6));
             ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Odrvinfo.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Odtype.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Odtype.c: In function 'H5O__dtype_debug':
H5Odtype.c:1748:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 (unsigned long)(dt->shared->u.compnd.memb[i].offset));
                 ^
H5Odtype.c:1750:21: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     indent + 3, MAX(0, fwidth - 3));
                     ^
H5Odtype.c:1755:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         H5O__dtype_debug(f, dt->shared->parent, stream, indent+3, MAX(0, fwidth-3));
         ^
H5Odtype.c:1985:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         H5O__dtype_debug(f, dt->shared->parent, stream, indent + 3, MAX(0, fwidth - 3));
         ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oefl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Oefl.c: In function 'H5O__efl_debug':
H5Oefl.c:560:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     mesg->slot[u].name);
     ^
H5Oefl.c:564:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     (unsigned long)(mesg->slot[u].name_offset));
     ^
H5Oefl.c:568:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->slot[u].offset));
      ^
H5Oefl.c:572:6: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
      (unsigned long)(mesg->slot[u].size));
      ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ofill.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Ofill.c: In function 'H5O_fill_old_decode':
H5Ofill.c:347:71: warning: ordered comparison of pointer with integer zero [-Wpedantic]
             if((dt = H5O_msg_read_oh(f, open_oh, H5O_DTYPE_ID, NULL)) < 0)
                                                                       ^
H5Ofill.c:350:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             if(fill->size != H5T_GET_SIZE(dt))
                           ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oflush.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ofsinfo.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Ofsinfo.c: In function 'H5O_fsinfo_decode':
H5Ofsinfo.c:139:35: warning: 'threshold' may be used uninitialized in this function [-Wmaybe-uninitialized]
                 fsinfo->threshold = threshold;
                                   ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oginfo.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Oint.c: In function 'H5O_create':
H5Oint.c:285:17: warning: unused variable 'store_msg_crt_idx' [-Wunused-variable]
     hbool_t     store_msg_crt_idx;      /* Whether to always store message crea tion indices for this file */
                 ^
H5Oint.c:284:17: warning: unused variable 'insert_flags' [-Wunused-variable]
     unsigned    insert_flags = H5AC__NO_FLAGS_SET; /* Flags for inserting objec t header into cache */
                 ^
H5Oint.c:283:16: warning: unused variable 'oh_flags' [-Wunused-variable]
     uint8_t    oh_flags;               /* Object header's initial status flags */
                ^
H5Oint.c:282:17: warning: unused variable 'oh_size' [-Wunused-variable]
     size_t      oh_size;                /* Size of initial object header */
                 ^
H5Oint.c:281:17: warning: unused variable 'oh_addr' [-Wunused-variable]
     haddr_t     oh_addr;                /* Address of initial object header */
                 ^
H5Oint.c:278:22: warning: unused variable 'oc_plist' [-Wunused-variable]
     H5P_genplist_t  *oc_plist;          /* Object creation property list */
                      ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Olayout.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Olayout.c: In function 'H5O__layout_decode':
H5Olayout.c:417:90: warning: 'tmp_hsize' may be used uninitialized in this function [-Wmaybe-uninitialized]
                     if(NULL == (mesg->storage.u.virt.list = (H5O_storage_virtual_ent_t *)H5MM_calloc((size_t)tmp_hsize * sizeof(H5O_storage_virtual_ent_t))))
                                                                                          ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Olinfo.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Olink.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Omessage.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Omessage.c: In function 'H5O_msg_reset_share':
H5Omessage.c:1669:28: warning: variable 'type' set but not used [-Wunused-but-set-variable]
     const H5O_msg_class_t *type;        /* Actual H5O class type for the ID */
                            ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Omtime.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oname.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Onull.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Opline.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Opline.c: In function 'H5O__pline_debug':
H5Opline.c:669:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             (unsigned)(pline->filter[i].id));
             ^
H5Opline.c:673:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 pline->filter[i].name);
                 ^
H5Opline.c:676:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 "Filter name:");
                 ^
H5Opline.c:679:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             pline->filter[i].flags);
             ^
H5Opline.c:682:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             pline->filter[i].cd_nelmts);
             ^
H5Opline.c:691:17: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 pline->filter[i].cd_values[j]);
                 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Orefcount.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Osdspace.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oshared.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Oshared.c: In function 'H5O__shared_copy_file':
H5Oshared.c:585:30: warning: unused parameter 'file_src' [-Wunused-parameter]
 H5O__shared_copy_file(H5F_t *file_src, H5F_t *file_dst,
                              ^
H5Oshared.c:587:79: warning: unused parameter 'cpy_info' [-Wunused-parameter]
     hbool_t H5_ATTR_UNUSED *recompute_size, unsigned *mesg_flags, H5O_copy_t *cpy_info,
                                                                               ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Oshmesg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ostab.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Otest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ounknown.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5P.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pacpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pdapl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pdcpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pdeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pdxpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pencdec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pfapl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Pfapl.c: In function 'H5P__file_driver_free':
H5Pfapl.c:1141:44: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
                     if((driver->fapl_free)((void *)info->driver_info) < 0)      /* Casting away const OK -QAK */
                                            ^
H5Pfapl.c:1145:32: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
                     H5MM_xfree((void *)info->driver_info);      /* Casting away const OK -QAK */
                                ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pfcpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pfmpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pgcpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Plapl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Plcpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pocpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pocpypl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Pstrcpl.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ptest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5PB.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5PL.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5PLint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5PLpath.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5PLplugin_cache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5R.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Rint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Rint.c: In function 'H5R__get_name':
H5Rint.c:709:31: warning: unused parameter 'id' [-Wunused-parameter]
 H5R__get_name(H5F_t *f, hid_t id, H5R_type_t ref_type, const void *_ref,
                               ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Rdeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5UC.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5RS.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5RS.c: In function 'H5RS_wrap':
H5RS.c:151:20: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
     ret_value->s = (char *)s;
                    ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5S.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Sall.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Sdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Sdbg.c: In function 'H5S_debug':
H5Sdbg.c:110:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             H5O_debug_id(H5O_SDSPACE_ID, f, &(mesg->extent), stream, indent + 3, MAX(0, fwidth - 3));
             ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Shyper.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Shyper.c: In function 'H5S__hyper_iter_init':
H5Shyper.c:602:28: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         H5S__hyper_rebuild((H5S_t *)space);     /* Casting away const OK -NAF */
                            ^
H5Shyper.c: In function 'H5S__hyper_is_regular':
H5Shyper.c:5181:28: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         H5S__hyper_rebuild((H5S_t *)space);     /* Casting away const OK -NAF */
                            ^
H5Shyper.c: In function 'H5S__hyper_shape_same':
H5Shyper.c:5447:28: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         H5S__hyper_rebuild((H5S_t *)space1);    /* Casting away const OK -QAK */
                            ^
H5Shyper.c:5449:28: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         H5S__hyper_rebuild((H5S_t *)space2);    /* Casting away const OK -QAK */
                            ^
H5Shyper.c:5494:42: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if(H5S__hyper_generate_spans((H5S_t *)space1) < 0)  /* Casting away const OK -QAK */
                                          ^
H5Shyper.c:5497:42: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if(H5S__hyper_generate_spans((H5S_t *)space2) < 0)  /* Casting away const OK -QAK */
                                          ^
H5Shyper.c: In function 'H5S__hyper_intersect_block':
H5Shyper.c:6118:28: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         H5S__hyper_rebuild((H5S_t *)space);     /* Casting away const OK -QAK */
                            ^
H5Shyper.c: In function 'H5S__hyper_proj_int_iterate':
H5Shyper.c:11249:74: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         H5S_HYPER_PROJ_INT_ADD_SKIP(udata, H5S__hyper_spans_nelem_helper((H5S_hyper_span_info_t *)ss_span_info, 0, udata->op_gen) * count, FAIL); /* Casting away const OK -NAF */
                                                                          ^
H5Shyper.c:74:27: note: in definition of macro 'H5S_HYPER_PROJ_INT_ADD_SKIP'
         (UDATA)->skip += (ADD);                                 \
                           ^
H5Shyper.c: In function 'H5S__hyper_project_intersection':
H5Shyper.c:11338:42: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if(H5S__hyper_generate_spans((H5S_t *)src_space) < 0)  /* Casting away const OK -NAF */
                                          ^
H5Shyper.c:11358:42: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if(H5S__hyper_generate_spans((H5S_t *)dst_space) < 0)  /* Casting away const OK -NAF */
                                          ^
H5Shyper.c:11376:38: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         if(H5S__hyper_generate_spans((H5S_t *)src_intersect_space) < 0)  /* Casting away const OK -NAF */
                                      ^
H5Shyper.c: At top level:
H5Shyper.c:3531:1: warning: 'H5S__hyper_get_enc_size_real' defined but not used [-Wunused-function]
 H5S__hyper_get_enc_size_real(hsize_t max_size)
 ^
H5Shyper.c: In function 'H5S__get_select_hyper_blocklist':
H5Shyper.c:4530:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 while(temp_dim >= 0 && !done) {
                                ^
H5Shyper.c: In function 'H5S__hyper_serialize':
H5Shyper.c:3992:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     while(temp_dim >= 0 && complete == FALSE) {
                                    ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Snone.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Spoint.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Sselect.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Stest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5SL.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5SL.c: In function 'H5SL_release_common':
H5SL.c:896:36: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             (void)(op)(node->item, (void *)node->key, op_data);
                                    ^
H5SL.c: In function 'H5SL_iterate':
H5SL.c:2210:46: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if((ret_value = (op)(node->item, (void *)node->key, op_data)) != 0)
                                              ^
H5SL.c: In function 'H5SL_try_free_safe':
H5SL.c:2369:44: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             if((op_ret = (op)(node->item , (void *)node->key, op_data)) < 0)
                                            ^
In file included from H5SL.c:64:0:
H5SL.c: In function 'H5SL_search':
H5private.h:2437:5: warning: 'ret_value' may be used uninitialized in this function [-Wmaybe-uninitialized]
     return(ret_value);                                                        \
     ^
H5SL.c:1397:11: note: 'ret_value' was declared here
     void *ret_value;                            /* Return value */
           ^
In file included from H5SL.c:64:0:
H5SL.c: In function 'H5SL_find':
H5private.h:2437:5: warning: 'ret_value' may be used uninitialized in this function [-Wmaybe-uninitialized]
     return(ret_value);                                                        \
     ^
H5SL.c:1698:18: note: 'ret_value' was declared here
     H5SL_node_t *ret_value;                     /* Return value */
                  ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5SM.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5SM.c: In function 'H5SM_delete':
H5SM.c:1844:26: warning: 'list_pos' may be used uninitialized in this function [-Wmaybe-uninitialized]
         if(list->messages[list_pos].location == H5SM_IN_HEAP)
                          ^
H5SM.c:1828:16: note: 'list_pos' was declared here
         size_t list_pos;        /* Position of the message in the list */
                ^
H5SM.c: In function 'H5SM_get_refcount':
H5SM.c:2230:33: warning: 'list_pos' may be used uninitialized in this function [-Wmaybe-uninitialized]
         message = list->messages[list_pos];
                                 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5SMbtree2.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5SMcache.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5SMmessage.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5SMtest.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5ST.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5T.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5T.c: In function 'H5T_nameof':
H5T.c:5246:23: warning: assignment discards 'const' qualifier from pointer target type
             ret_value = &(dt->path);
                       ^
H5T.c: In function 'H5T_cmp':
H5T.c:4256:94: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int) dt1->shared->u.compnd.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                              ^
H5T.c:4268:94: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int) dt2->shared->u.compnd.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                              ^
H5T.c:4341:95: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for (i = (int) dt1->shared->u.enumer.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                               ^
H5T.c:4359:94: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 for(i = (int) dt2->shared->u.enumer.nmembs - 1, swapped = TRUE; swapped && i >= 0; --i) {
                                                                                              ^
H5T.c:4356:15: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
             if(dt2->shared->u.enumer.nmembs > 1) {
               ^
H5T.c:4339:15: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
             if(dt1->shared->u.enumer.nmembs > 1) {
               ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tarray.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tbit.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tcommit.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tcompound.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tconv.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Tconv.c: In function 'H5T_conv_struct_free':
H5Tconv.c:1849:17: warning: variable 'status' set but not used [-Wunused-but-set-variable]
             int status;
                 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tcset.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tdbg.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tdeprec.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tenum.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tfields.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tfixed.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tfloat.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5detect.o
  CCLD     H5detect
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo  |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5detect > H5Tinit.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5Tinit.c ; exit 1)
  CC       H5Tinit.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tnative.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Tnative.c:524:1: warning: unknown option after '#pragma GCC diagnostic' kind [-Wpragmas]
 H5_GCC_DIAG_OFF(duplicated-branches)
 ^
H5Tnative.c:673:1: warning: unknown option after '#pragma GCC diagnostic' kind [-Wpragmas]
 H5_GCC_DIAG_OFF(duplicated-branches)
 ^
H5Tnative.c:806:1: warning: unknown option after '#pragma GCC diagnostic' kind [-Wpragmas]
 H5_GCC_DIAG_OFF(duplicated-branches)
 ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Toffset.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Toh.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Topaque.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Torder.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tpad.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tprecis.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tstrpad.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tvisit.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Tvlen.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5Tvlen.c: In function 'H5T_vlen_disk_isnull':
H5Tvlen.c:852:24: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
     H5F_addr_decode(f, (const uint8_t **)&vl, &addr);
                        ^
H5Tvlen.c: In function 'H5T_vlen_disk_read':
H5Tvlen.c:888:24: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
     H5F_addr_decode(f, (const uint8_t **)&vl, &(hobjid.addr));
                        ^
H5Tvlen.c: In function 'H5T_vlen_disk_write':
H5Tvlen.c:939:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&bg, &(bg_hobjid.addr));
                            ^
H5Tvlen.c: In function 'H5T_vlen_disk_setnull':
H5Tvlen.c:1000:28: warning: to be safe all intermediate pointers in cast from 'uint8_t **' to 'const uint8_t **' must be 'const' qualified [-Wcast-qual]
         H5F_addr_decode(f, (const uint8_t **)&bg, &(bg_hobjid.addr));
                            ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5TS.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5VM.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5WB.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Z.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Zdeflate.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Zfletcher32.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Znbit.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Zshuffle.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Zscaleoffset.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Zszip.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5Ztrans.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libhdf5.la
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/src'
make[1]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/src'
Making all in test
make[1]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/test'
  CC       h5test.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
h5test.c: In function 'h5_get_vfd_fapl':
h5test.c:956:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             memb_addr[mt] = (haddr_t)MAX(mt - 1, 0) * (HADDR_MAX / 10);
             ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       testframe.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       cache_common.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
cache_common.c: In function 'get_initial_load_size':
cache_common.c:556:66: warning: unused parameter 'entry_type' [-Wunused-parameter]
 get_initial_load_size(void *udata, size_t *image_length, int32_t entry_type)
                                                                  ^
cache_common.c: In function 'get_final_load_size':
cache_common.c:666:46: warning: unused parameter 'entry_type' [-Wunused-parameter]
     void *udata, size_t *actual_len, int32_t entry_type)
                                              ^
cache_common.c: In function 'verify_chksum':
cache_common.c:726:97: warning: unused parameter 'entry_type' [-Wunused-parameter]
 verify_chksum(const void H5_ATTR_UNUSED *image, size_t H5_ATTR_UNUSED len, void *udata, int32_t entry_type)
                                                                                                 ^
cache_common.c: In function 'deserialize':
cache_common.c:779:39: warning: unused parameter 'len' [-Wunused-parameter]
 deserialize(const void *image, size_t len, void *udata, hbool_t *dirty,
                                       ^
cache_common.c:780:13: warning: unused parameter 'entry_type' [-Wunused-parameter]
     int32_t entry_type)
             ^
cache_common.c: In function 'image_len':
cache_common.c:941:13: warning: variable 'idx' set but not used [-Wunused-but-set-variable]
     int32_t idx;
             ^
cache_common.c:939:19: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t *base_addr;
                   ^
cache_common.c:936:60: warning: unused parameter 'entry_type' [-Wunused-parameter]
 image_len(const void *thing, size_t *image_length, int32_t entry_type)
                                                            ^
cache_common.c: In function 'pre_serialize':
cache_common.c:1069:13: warning: variable 'idx' set but not used [-Wunused-but-set-variable]
     int32_t idx;
             ^
cache_common.c:1067:19: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t *base_addr;
                   ^
cache_common.c:1058:22: warning: unused parameter 'f' [-Wunused-parameter]
 pre_serialize(H5F_t *f,
                      ^
cache_common.c:1060:23: warning: unused parameter 'addr' [-Wunused-parameter]
               haddr_t addr,
                       ^
cache_common.c:1061:22: warning: unused parameter 'len' [-Wunused-parameter]
               size_t len,
                      ^
cache_common.c: In function 'serialize':
cache_common.c:1312:13: warning: variable 'idx' set but not used [-Wunused-but-set-variable]
     int32_t idx;
             ^
cache_common.c:1310:19: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t *base_addr;
                   ^
cache_common.c: In function 'notify':
cache_common.c:1467:19: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t *base_addr;
                   ^
cache_common.c:1464:57: warning: unused parameter 'entry_type' [-Wunused-parameter]
 notify(H5C_notify_action_t action, void *thing, int32_t entry_type)
                                                         ^
cache_common.c: In function 'free_icr':
cache_common.c:1545:19: warning: variable 'base_addr' set but not used [-Wunused-but-set-variable]
     test_entry_t *base_addr;
                   ^
cache_common.c:1543:39: warning: unused parameter 'entry_type' [-Wunused-parameter]
 free_icr(test_entry_t *entry, int32_t entry_type)
                                       ^
cache_common.c: In function 'flush_cache':
cache_common.c:3172:16: warning: unused variable 'result' [-Wunused-variable]
         herr_t result = 0;
                ^
cache_common.c: In function 'row_major_scan_forward':
cache_common.c:4078:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4092:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4106:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && do_moves && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                             ^
cache_common.c:4120:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4134:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4149:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4163:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4177:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4191:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4205:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4219:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4245:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4259:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c: In function 'hl_row_major_scan_forward':
cache_common.c:4436:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_inserts ) && ( (idx + lag) >= 0 ) &&
                                             ^
cache_common.c: In function 'row_major_scan_backward':
cache_common.c:4559:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4560:28: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                  ( tmp_idx <= local_max_index ) &&
                            ^
cache_common.c:4570:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4581:56: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_moves ) && ( tmp_idx >= 0 ) &&
                                                        ^
cache_common.c:4593:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4604:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4617:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4628:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4639:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4650:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4661:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4672:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4692:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4703:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c: In function 'hl_row_major_scan_backward':
cache_common.c:4845:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_inserts ) && ( (idx + lag) >= 0 ) &&
                                             ^
cache_common.c: In function 'row_major_scan_forward':
cache_common.c:4078:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4092:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4106:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && do_moves && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                             ^
cache_common.c:4120:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4134:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4149:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4163:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4177:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4191:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4205:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4219:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4245:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4259:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4078:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4092:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4106:45: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && do_moves && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                             ^
cache_common.c:4120:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4134:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4149:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4163:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4177:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4191:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4205:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4219:29: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if(pass && (tmp_idx >= 0) && (tmp_idx < local_max_index) &&
                             ^
cache_common.c:4245:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c:4259:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if(pass && (tmp_idx >= 0) && (tmp_idx <= local_max_index) &&
                                 ^
cache_common.c: In function 'hl_row_major_scan_forward':
cache_common.c:4449:52: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             while ( ( pass ) && ( i >= idx - lag ) && ( i >= 0 ) )
                                                    ^
cache_common.c: In function 'row_major_scan_backward':
cache_common.c:4559:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4560:28: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                  ( tmp_idx <= local_max_index ) &&
                            ^
cache_common.c:4570:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4581:56: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_moves ) && ( tmp_idx >= 0 ) &&
                                                        ^
cache_common.c:4593:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4604:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4617:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4628:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4639:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4650:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4661:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4672:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4692:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4703:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4559:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4560:28: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                  ( tmp_idx <= local_max_index ) &&
                            ^
cache_common.c:4570:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4581:56: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( do_moves ) && ( tmp_idx >= 0 ) &&
                                                        ^
cache_common.c:4593:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4604:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4617:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4628:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4639:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4650:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4661:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4672:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                    ^
cache_common.c:4692:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c:4703:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             if ( ( pass ) && ( tmp_idx >= 0 ) &&
                                        ^
cache_common.c: In function 'hl_row_major_scan_backward':
cache_common.c:4858:52: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             while ( ( pass ) && ( i >= idx - lag ) && ( i >= 0 ) )
                                                    ^
cache_common.c:4843:26: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         while ( ( pass ) && ( idx >= -lag ) )
                          ^
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       swmr_common.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       external_common.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libh5test.la
  CC       filter_plugin1_dsets.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libfilter_plugin1_dsets.la
  CC       filter_plugin2_dsets.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libfilter_plugin2_dsets.la
  CC       filter_plugin3_dsets.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libfilter_plugin3_dsets.la
  CC       filter_plugin4_groups.lo
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libfilter_plugin4_groups.la
  CC       testhdf5.o
  CC       tarray.o
tarray.c: In function 'test_array_vlen_atomic':
tarray.c:1125:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(i+j+1); k++)
             ^
tarray.c: In function 'test_array_vlen_array':
tarray.c:1341:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k=0; k<(i+j+1); k++)
             ^
  CC       tattr.o
  CC       tchecksum.o
  CC       tconfig.o
  CC       tfile.o
tfile.c: In function 'set_multi_split':
tfile.c:3902:55: warning: unused parameter 'multi' [-Wunused-parameter]
 set_multi_split(hid_t fapl, hsize_t pagesize, hbool_t multi, hbool_t split)
                                                       ^
tfile.c: In function 'test_libver_macros':
tfile.c:6939:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major-1,minor,release), TRUE, "H5_VERSION_GE");
     ^
tfile.c:6939:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6940:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major-1,minor+1,release), TRUE, "H5_VERSION_GE");
     ^
tfile.c:6940:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6940:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6940:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6941:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major-1,minor,release+1), TRUE, "H5_VERSION_GE");
     ^
tfile.c:6941:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6941:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6941:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6942:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major,minor-1,release), TRUE, "H5_VERSION_GE");
     ^
tfile.c:6942:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6943:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major,minor-1,release+1), TRUE, "H5_VERSION_GE");
     ^
tfile.c:6943:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6943:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6943:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6945:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         VERIFY(H5_VERSION_GE(major,minor,release-1), TRUE, "H5_VERSION_GE");
         ^
tfile.c:6945:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6947:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major+1,minor,release), FALSE, "H5_VERSION_GE");
     ^
tfile.c:6947:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6948:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major+1,minor-1,release), FALSE, "H5_VERSION_GE");
     ^
tfile.c:6948:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6948:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6948:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6949:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major+1,minor-1,release-1), FALSE, "H5_VERSION_GE");
     ^
tfile.c:6949:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6949:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6949:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6949:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6949:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6950:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major,minor+1,release), FALSE, "H5_VERSION_GE");
     ^
tfile.c:6950:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6951:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major,minor+1,release-1), FALSE, "H5_VERSION_GE");
     ^
tfile.c:6951:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6951:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6951:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6952:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_GE(major,minor,release+1), FALSE, "H5_VERSION_GE");
     ^
tfile.c:6952:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6955:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major+1,minor,release), TRUE, "H5_VERSION_LE");
     ^
tfile.c:6955:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6956:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major+1,minor-1,release), TRUE, "H5_VERSION_LE");
     ^
tfile.c:6956:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6956:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6956:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6957:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major+1,minor-1,release-1), TRUE, "H5_VERSION_LE");
     ^
tfile.c:6957:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6957:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6957:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6957:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6957:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6958:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major,minor+1,release), TRUE, "H5_VERSION_LE");
     ^
tfile.c:6958:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6959:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major,minor+1,release-1), TRUE, "H5_VERSION_LE");
     ^
tfile.c:6959:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6959:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6959:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6960:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major,minor,release+1), TRUE, "H5_VERSION_LE");
     ^
tfile.c:6960:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6962:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major-1,minor,release), FALSE, "H5_VERSION_LE");
     ^
tfile.c:6962:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6963:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major-1,minor+1,release), FALSE, "H5_VERSION_LE");
     ^
tfile.c:6963:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6963:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6963:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6964:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major-1,minor+1,release+1), FALSE, "H5_VERSION_LE");
     ^
tfile.c:6964:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6964:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6964:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6964:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6964:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6965:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major,minor-1,release), FALSE, "H5_VERSION_LE");
     ^
tfile.c:6965:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6966:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     VERIFY(H5_VERSION_LE(major,minor-1,release+1), FALSE, "H5_VERSION_LE");
     ^
tfile.c:6966:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6966:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6966:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
tfile.c:6968:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         VERIFY(H5_VERSION_LE(major,minor,release-1), FALSE, "H5_VERSION_LE");
         ^
tfile.c:6968:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
  CC       tgenprop.o
  CC       th5o.o
  CC       th5s.o
  CC       tcoords.o
tcoords.c: In function 'test_multiple_ends':
tcoords.c:410:9: warning: size of 'data_buf' is 69120 bytes [-Wlarger-than=]
     int data_buf[4][5][3][4][2][3][6][2];
         ^
tcoords.c:446:9: warning: size of 'mem5_buffer' is 7680 bytes [-Wlarger-than=]
     int mem5_buffer[4][5][1][4][2][1][6][2];
         ^
tcoords.c:402:13: warning: stack usage might be 81904 bytes [-Wstack-usage=]
 static void test_multiple_ends(hid_t file, hbool_t is_chunked)
             ^
tcoords.c:661:1: warning: the frame size of 81824 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 }
 ^
  CC       theap.o
  CC       tid.o
tid.c: In function 'test_rct_free':
tid.c:601:22: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if(!obj->freeing && (obj->obj_list->nobjs_rem > 0)) {
                      ^
  CC       titerate.o
titerate.c: In function 'aiter_cb':
titerate.c:375:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:379:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c: In function 'liter_cb':
titerate.c:112:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:116:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c: In function 'aiter_cb':
titerate.c:375:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:379:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c:375:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:379:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c: In function 'liter_cb':
titerate.c:112:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:116:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
titerate.c:112:35: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count > 10 ? 1 : 0);
                                   ^
titerate.c:116:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             return(count2 > 10 ? 1 : 0);
                                    ^
  CC       tmeta.o
  CC       tmisc.o
  CC       trefer.o
  CC       trefstr.o
  CC       tselect.o
tselect.c: In function 'test_shape_same_dr__run_full_space_vs_slice_tests':
tselect.c:10787:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:10790:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:10793:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:10796:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:10799:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c: In function 'test_shape_same_dr__run_checkerboard_tests':
tselect.c:11399:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11402:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11405:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11408:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11411:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c: In function 'test_shape_same_dr__run_irregular_tests':
tselect.c:11887:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11890:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11893:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11896:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11899:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2 ) && (large_rank >= 5));
                        ^
tselect.c: In function 'test_select':
tselect.c:10787:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:10790:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:10793:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:10796:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:10799:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c:11399:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11402:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11405:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11408:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11411:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c:11887:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11890:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11893:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11896:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11899:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2 ) && (large_rank >= 5));
                        ^
tselect.c:10787:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:10790:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:10793:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:10796:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:10799:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c:11399:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11402:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11405:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11408:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11411:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2) && (large_rank >= 5));
                        ^
tselect.c:11887:40: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                             } while((z < 2) && (large_rank >= 1));
                                        ^
tselect.c:11890:36: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                         } while((y < 2) && (large_rank >= 2));
                                    ^
tselect.c:11893:32: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                     } while((x < 2) && (large_rank >= 3));
                                ^
tselect.c:11896:28: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while((w < 2) && (large_rank >= 4));
                            ^
tselect.c:11899:24: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             } while((v < 2 ) && (large_rank >= 5));
                        ^
  CC       tskiplist.o
  CC       tsohm.o
  CC       ttime.o
  CC       ttst.o
ttst.c: In function 'test_tst_init':
ttst.c:105:18: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         tmp_word=(char *)words[u];
                  ^
  CC       tunicode.o
  CC       tvlstr.o
tvlstr.c: In function 'test_write_same_element':
tvlstr.c:864:5: warning: initialization discards 'const' qualifier from pointer target type
     char *val[SPACE1_DIM1] = {"But", "reuniting", "is a", "great joy"};
     ^
tvlstr.c:864:5: warning: initialization discards 'const' qualifier from pointer target type
tvlstr.c:864:5: warning: initialization discards 'const' qualifier from pointer target type
tvlstr.c:864:5: warning: initialization discards 'const' qualifier from pointer target type
tvlstr.c:869:5: warning: initialization discards 'const' qualifier from pointer target type
     char *wdata[SPACE1_DIM1] = {"Parting", "is such a", "sweet", "sorrow."};
     ^
tvlstr.c:869:5: warning: initialization discards 'const' qualifier from pointer target type
tvlstr.c:869:5: warning: initialization discards 'const' qualifier from pointer target type
tvlstr.c:869:5: warning: initialization discards 'const' qualifier from pointer target type
  CC       tvltypes.o
tvltypes.c: In function 'test_vltypes_fill_value':
tvltypes.c:2438:5: warning: initialization discards 'const' qualifier from pointer target type
     const dtype1_struct fill1 = {1, 2, "foobar", "", NULL, "\0", "dead", 3, 4.0F, 100.0F, 1.0F, "liquid", "meter"};
     ^
tvltypes.c:2438:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2438:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2438:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2438:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2438:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2439:5: warning: initialization discards 'const' qualifier from pointer target type
     const dtype1_struct wdata = {3, 4, "", NULL, "\0", "foo", "two", 6, 8.0F, 200.0F, 2.0F, "solid", "yard"};
     ^
tvltypes.c:2439:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2439:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2439:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2439:5: warning: initialization discards 'const' qualifier from pointer target type
tvltypes.c:2439:5: warning: initialization discards 'const' qualifier from pointer target type
  CCLD     testhdf5
  CC       cache.o
cache.c: In function 'check_flush_cache__flush_ops':
cache.c:7157:37: warning: size of 'spec' is 2592 bytes [-Wlarger-than=]
     struct fo_flush_cache_test_spec spec[6] =
                                     ^
cache.c:7423:37: warning: size of 'spec' is 2592 bytes [-Wlarger-than=]
     struct fo_flush_cache_test_spec spec[6] =
                                     ^
cache.c:8021:37: warning: size of 'spec' is 4320 bytes [-Wlarger-than=]
     struct fo_flush_cache_test_spec spec[10] =
                                     ^
cache.c:8455:37: warning: size of 'spec' is 4320 bytes [-Wlarger-than=]
     struct fo_flush_cache_test_spec spec[10] =
                                     ^
cache.c: In function 'check_flush_cache__flush_op_eviction_test':
cache.c:9706:34: warning: size of 'expected' is 6160 bytes [-Wlarger-than=]
     struct expected_entry_status expected[10 + 31 + 14] =
                                  ^
cache.c: In function 'check_flush_cache__single_entry':
cache.c:12248:7: warning: size of 'spec' is 8192 bytes [-Wlarger-than=]
     } spec[256] =
       ^
cache.c: In function 'check_metadata_blizzard_absence':
cache.c:28269:34: warning: size of 'expected' is 16800 bytes [-Wlarger-than=]
     struct expected_entry_status expected[150] =
                                  ^
cache.c: In function 'check_metadata_cork':
cache.c:33836:34: warning: size of 'expected' is 16800 bytes [-Wlarger-than=]
     struct expected_entry_status expected[150] =
                                  ^
cache.c: In function 'cedds__expunge_dirty_entry_in_flush_test':
cache.c:34666:34: warning: size of 'expected' is 4032 bytes [-Wlarger-than=]
     struct expected_entry_status expected[36] =
                                  ^
cache.c: In function 'cedds__H5C_make_space_in_cache':
cache.c:34895:34: warning: size of 'expected' is 4032 bytes [-Wlarger-than=]
     struct expected_entry_status expected[36] =
                                  ^
cache.c: In function 'cedds__H5C__autoadjust__ageout__evict_aged_out_entries':
cache.c:35275:34: warning: size of 'expected' is 4032 bytes [-Wlarger-than=]
     struct expected_entry_status expected[36] =
                                  ^
cache.c: In function 'check_flush_cache__single_entry':
cc1: warning: size of '*.LC4' is 8192 bytes [-Wlarger-than=]
cache.c: In function 'cedds__H5C_make_space_in_cache':
cc1: warning: size of '*.LC19' is 4032 bytes [-Wlarger-than=]
cache.c: In function 'check_flush_cache__single_entry':
cache.c:11027:1: warning: stack usage might be 8304 bytes [-Wstack-usage=]
 check_flush_cache__single_entry(H5F_t * file_ptr)
 ^
cache.c: In function 'check_metadata_cork':
cache.c:33816:1: warning: stack usage is 16864 bytes [-Wstack-usage=]
 check_metadata_cork(hbool_t fill_via_insertion, unsigned paged)
 ^
cache.c:34527:1: warning: the frame size of 16800 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* check_metadata_cork() */
 ^
cache.c: In function 'check_metadata_blizzard_absence':
cache.c:28250:1: warning: stack usage is 16864 bytes [-Wstack-usage=]
 check_metadata_blizzard_absence(hbool_t fill_via_insertion, unsigned paged)
 ^
cache.c:29079:1: warning: the frame size of 16800 bytes is larger than 16384 bytes [-Wframe-larger-than=]
 } /* check_metadata_blizzard_absence() */
 ^
  CCLD     cache
  CC       cache_api.o
  CCLD     cache_api
  CC       cache_image.o
cache_image.c: In function 'create_datasets':
cache_image.c:382:22: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     while ( ( pass ) && ( i <= max_dset ) )
                      ^
cache_image.c:297:30: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             while ( ( pass ) && ( m <= max_dset ) )
                              ^
cache_image.c:244:30: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             while ( ( pass ) && ( m <= max_dset ) )
                              ^
cache_image.c:129:26: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
         while ( ( pass ) && ( i <= max_dset ) )
                          ^
cache_image.c: In function 'verify_datasets':
cache_image.c:1224:22: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     while ( ( pass ) && ( i <= max_dset ) )
                      ^
cache_image.c:1139:30: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             while ( ( pass ) && ( m <= max_dset ) )
                              ^
cache_image.c:1062:26: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
         while ( ( pass ) && ( i <= max_dset ) )
                          ^
cache_image.c: In function 'cache_image_smoke_check_5':
cache_image.c:4913:16: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     while(pass && i <= max_group) {
                ^
cache_image.c:4965:22: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     while ( ( pass ) && ( i <= max_group ) ) {
                      ^
cache_image.c:5030:22: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     while ( ( pass ) && ( i <= max_group ) ) {
                      ^
cache_image.c:4965:22: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     while ( ( pass ) && ( i <= max_group ) ) {
                      ^
cache_image.c:5030:22: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     while ( ( pass ) && ( i <= max_group ) ) {
                      ^
cache_image.c: In function 'delete_datasets':
cache_image.c:470:26: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
         while ( ( pass ) && ( i <= max_dset ) )
                          ^
  CC       genall5.o
  CCLD     cache_image
  CC       cache_tagging.o
cache_tagging.c: In function 'check_invalid_tag_application':
cache_tagging.c:3759:1: warning: label 'error' defined but not used [-Wunused-label]
 error:
 ^
  CCLD     cache_tagging
  CC       lheap.o
  CCLD     lheap
  CC       ohdr.o
  CCLD     ohdr
  CC       stab.o
  CCLD     stab
  CC       gheap.o
  CCLD     gheap
  CC       evict_on_close.o
  CCLD     evict_on_close
  CC       farray.o
  CCLD     farray
  CC       earray.o
  CCLD     earray
  CC       btree2.o
  CCLD     btree2
  CC       fheap.o
  CCLD     fheap
  CC       pool.o
  CCLD     pool
  CC       accum.o
  CCLD     accum
  CC       hyperslab.o
  CCLD     hyperslab
  CC       istore.o
  CCLD     istore
  CC       bittests.o
  CCLD     bittests
  CC       dt_arith.o
dt_arith.c: In function 'my_isnan':
dt_arith.c:2728:16: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     retval = (x!=x);
                ^
dt_arith.c:2732:16: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     retval = (x!=x);
                ^
dt_arith.c:2737:16: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]
     retval = (x!=x);
                ^
  CCLD     dt_arith
  CC       page_buffer.o
  CCLD     page_buffer
  CC       dtypes.o
dtypes.c: In function 'test_utf_ascii_conv':
dtypes.c:7225:55: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         status = H5Tconvert(utf8_vtid, ascii_vtid, 1, (void *)utf8_w, NULL, H5P_DEFAULT);
                                                       ^
dtypes.c:7258:55: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
         status = H5Tconvert(ascii_vtid, utf8_vtid, 1, (void *)ascii_w, NULL, H5P_DEFAULT);
                                                       ^
dtypes.c: In function 'test_compound_2':
dtypes.c:670:1: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
 test_compound_2(void)
 ^
dtypes.c:670:1: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
dtypes.c: In function 'test_compound_4':
dtypes.c:920:1: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
 test_compound_4(void)
 ^
dtypes.c:920:1: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
dtypes.c: In function 'main':
dtypes.c:7760:1: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
 main(void)
 ^
dtypes.c:7760:1: warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]
dtypes.c:4706:8: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     if (nerrors) {
        ^
  CCLD     dtypes
  CC       dsets.o
dsets.c: In function 'make_random_offset_and_increment':
dsets.c:7277:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     maxinc = MIN(nelts - 1, LONG_MAX - nelts);
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c: In function 'test_random_chunks_real':
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c: In function 'test_fixed_array':
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
dsets.c:7237:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     bool negative = ((l0 < 0) != (r0 < 0));
     ^
  CCLD     dsets
  CC       chunk_info.o
chunk_info.c: In function 'test_chunk_info_extensible_array':
chunk_info.c:1056:14: warning: unused variable 'out_buf' [-Wunused-variable]
     int      out_buf[NX][NY];    /* Buffer to read data in */
              ^
chunk_info.c: In function 'test_chunk_info_version2_btrees':
chunk_info.c:1263:14: warning: unused variable 'out_buf' [-Wunused-variable]
     int      out_buf[NX][NY];    /* Buffer to read data in */
              ^
chunk_info.c: In function 'create_4x4_dset':
chunk_info.c:1641:5: warning: 'pid' may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Pclose(pid);
     ^
chunk_info.c:1640:5: warning: 'm_sid' may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Sclose(m_sid);
     ^
chunk_info.c:1639:5: warning: 'f_sid' may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Sclose(f_sid);
     ^
chunk_info.c:1638:5: warning: 'did' may be used uninitialized in this function [-Wmaybe-uninitialized]
     H5Dclose(did);
     ^
  CCLD     chunk_info
  CC       cmpd_dset.o
cmpd_dset.c: In function 'test_hdf5_src_subset':
cmpd_dset.c:924:37: warning: assuming signed overflow does not occur when simplifying division [-Wstrict-overflow]
         s_ptr->h[j] = (float)(i * j / 5 + j);
                                     ^
cmpd_dset.c:924:37: warning: assuming signed overflow does not occur when simplifying division [-Wstrict-overflow]
cmpd_dset.c:924:37: warning: assuming signed overflow does not occur when simplifying division [-Wstrict-overflow]
  CCLD     cmpd_dset
  CC       filter_fail.o
  CCLD     filter_fail
  CC       extend.o
  CCLD     extend
  CC       direct_chunk.o
  CCLD     direct_chunk
  CC       external.o
  CCLD     external
  CC       efc.o
  CCLD     efc
  CC       objcopy.o
objcopy.c: In function 'compare_data':
objcopy.c:1098:24: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             ref_buf1 = (const hdset_reg_ref_t *)buf1;
                        ^
objcopy.c:1099:24: warning: cast discards 'const' qualifier from pointer target type [-Wcast-qual]
             ref_buf2 = (const hdset_reg_ref_t *)buf2;
                        ^
objcopy.c: In function 'attach_attribute_compound_vlstr':
objcopy.c:5808:11: warning: assignment discards 'const' qualifier from pointer target type
     buf.v = "ThisIsAString";
           ^
  CCLD     objcopy
  CC       links.o
  CCLD     links
  CC       unlink.o
  CCLD     unlink
  CC       twriteorder.o
  CCLD     twriteorder
  CC       big.o
big.c: In function 'reader':
big.c:533:11: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
         if(zero) {
           ^
big.c: In function 'writer.constprop':
big.c:128:33: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     while(overlap != 0 && tries < MAX_TRIES)
                                 ^
  CCLD     big
  CC       mtime.o
  CCLD     mtime
  CC       fillval.o
  CCLD     fillval
  CC       mount.o
  CCLD     mount
  CC       flush1.o
  CCLD     flush1
  CC       flush2.o
  CCLD     flush2
  CC       app_ref.o
app_ref.c: In function 'main':
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:113:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_FILE)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:119:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_PLIST)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:126:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_PCLASS)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:132:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_TYPE)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:138:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_SPACE)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:145:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_DSET)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:152:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_ATTR)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:159:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_GROUP)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:165:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_ECLASS)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:171:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_EMSG)
     ^
app_ref.c:35:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for (i=0; i<ninc; i++)                                                     \
     ^
app_ref.c:177:5: note: in expansion of macro 'RAND_INC'
     RAND_INC (T_ESTACK)
     ^
  CCLD     app_ref
  CC       enum.o
  CCLD     enum
  CC       set_extent.o
set_extent.c: In function 'test_random_rank4':
set_extent.c:2273:17: warning: size of 'rbuf' is 40000 bytes [-Wlarger-than=]
     static int  rbuf[10][10][10][10];           /* Read buffer */
                 ^
set_extent.c:2274:17: warning: size of 'wbuf' is 40000 bytes [-Wlarger-than=]
     static int  wbuf[10][10][10][10];           /* Write buffer */
                 ^
set_extent.c:2275:20: warning: size of 'dim_log' is 3232 bytes [-Wlarger-than=]
     static hsize_t dim_log[RAND4_NITER+1][4];   /* Log of dataset dimensions */
                    ^
set_extent.c: In function 'test_random_rank4_vl':
set_extent.c:2476:18: warning: size of 'rbuf' is 160000 bytes [-Wlarger-than=]
     static hvl_t rbuf[10][10][10][10];          /* Read buffer */
                  ^
set_extent.c:2477:18: warning: size of 'wbuf' is 160000 bytes [-Wlarger-than=]
     static hvl_t wbuf[10][10][10][10];          /* Write buffer */
                  ^
set_extent.c:2478:20: warning: size of 'dim_log' is 3232 bytes [-Wlarger-than=]
     static hsize_t dim_log[RAND4_NITER+1][4];   /* Log of dataset dimensions */
                    ^
  CCLD     set_extent
  CC       ttsafe.o
  CC       ttsafe_dcreate.o
  CC       ttsafe_error.o
  CC       ttsafe_cancel.o
  CC       ttsafe_acreate.o
  CC       ttsafe_attr_vlen.o
  CCLD     ttsafe
  CC       enc_dec_plist.o
  CCLD     enc_dec_plist
  CC       enc_dec_plist_cross_platform.o
  CCLD     enc_dec_plist_cross_platform
  CC       getname.o
  CCLD     getname
  CC       vfd.o
  CCLD     vfd
  CC       ros3.o
  CCLD     ros3
  CC       s3comms.o
  CCLD     s3comms
  CC       hdfs.o
  CCLD     hdfs
  CC       ntypes.o
ntypes.c:33:5: warning: size of 'ipoints2' is 80000 bytes [-Wlarger-than=]
 int ipoints2[DIM0][DIM1], icheck2[DIM0][DIM1];
     ^
ntypes.c:33:27: warning: size of 'icheck2' is 80000 bytes [-Wlarger-than=]
 int ipoints2[DIM0][DIM1], icheck2[DIM0][DIM1];
                           ^
ntypes.c:34:7: warning: size of 'spoints2' is 40000 bytes [-Wlarger-than=]
 short spoints2[DIM0][DIM1], scheck2[DIM0][DIM1];
       ^
ntypes.c:34:29: warning: size of 'scheck2' is 40000 bytes [-Wlarger-than=]
 short spoints2[DIM0][DIM1], scheck2[DIM0][DIM1];
                             ^
ntypes.c:35:5: warning: size of 'ipoints3' is 400000 bytes [-Wlarger-than=]
 int ipoints3[DIM0][DIM1][5], icheck3[DIM0][DIM1][5];
     ^
ntypes.c:35:30: warning: size of 'icheck3' is 400000 bytes [-Wlarger-than=]
 int ipoints3[DIM0][DIM1][5], icheck3[DIM0][DIM1][5];
                              ^
  CCLD     ntypes
  CC       dangle.o
  CCLD     dangle
  CC       dtransform.o
dtransform.c: In function 'main':
dtransform.c:289:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_utrans_inv, char, H5T_NATIVE_CHAR, "char", transformData, 0);
     ^
dtransform.c:289:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:289:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:289:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:290:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_utrans_inv, unsigned char, H5T_NATIVE_UCHAR, "uchar", transformData, 0);
     ^
dtransform.c:290:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:290:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:290:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:291:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, signed char, H5T_NATIVE_SCHAR, "schar", windchillFfloat, 1);
     ^
dtransform.c:291:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:291:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:291:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:292:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, short, H5T_NATIVE_SHORT, "short", windchillFfloat, 1);
     ^
dtransform.c:292:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:292:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:292:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:293:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_utrans_inv, unsigned short, H5T_NATIVE_USHORT, "ushort", transformData, 0);
     ^
dtransform.c:293:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:293:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:293:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:294:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, int, H5T_NATIVE_INT, "int", windchillFfloat, 1);
     ^
dtransform.c:294:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:294:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:294:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:296:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, long, H5T_NATIVE_LONG, "long", windchillFfloat, 1);
     ^
dtransform.c:296:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:296:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:296:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:298:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, long long, H5T_NATIVE_LLONG, "llong", windchillFfloat, 1);
     ^
dtransform.c:298:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:298:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:298:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:117:10: warning: size of 'array' is 3456 bytes [-Wlarger-than=]
     TYPE array[ROWS][COLS];                            \
          ^
dtransform.c:303:5: note: in expansion of macro 'TEST_TYPE_CONTIG'
     TEST_TYPE_CONTIG(dxpl_id_c_to_f, long double, H5T_NATIVE_LDOUBLE, "ldouble", windchillFfloat, 1);
     ^
dtransform.c:306:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_utrans_inv, char, H5T_NATIVE_CHAR, "char", transformData, 0);
     ^
dtransform.c:306:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:307:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_utrans_inv, unsigned char, H5T_NATIVE_UCHAR, "uchar", transformData, 0);
     ^
dtransform.c:307:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:308:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, signed char, H5T_NATIVE_SCHAR, "schar", windchillFfloat, 1);
     ^
dtransform.c:308:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:309:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, short, H5T_NATIVE_SHORT, "short", windchillFfloat, 1);
     ^
dtransform.c:309:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:310:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_utrans_inv, unsigned short, H5T_NATIVE_USHORT, "ushort", transformData, 0);
     ^
dtransform.c:310:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:311:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, int, H5T_NATIVE_INT, "int", windchillFfloat, 1);
     ^
dtransform.c:311:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:313:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, long, H5T_NATIVE_LONG, "long", windchillFfloat, 1);
     ^
dtransform.c:313:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:315:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, long long, H5T_NATIVE_LLONG, "llong", windchillFfloat, 1);
     ^
dtransform.c:315:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
dtransform.c:183:10: warning: size of 'array' is 3456 bytes [-Wlarger-than=]
     TYPE array[ROWS][COLS];                            \
          ^
dtransform.c:320:5: note: in expansion of macro 'TEST_TYPE_CHUNK'
     TEST_TYPE_CHUNK(dxpl_id_c_to_f, long double, H5T_NATIVE_LDOUBLE, "ldouble", windchillFfloat, 1);
     ^
  CCLD     dtransform
  CC       reserved.o
  CCLD     reserved
  CC       cross_read.o
cross_read.c: In function 'check_data_i':
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
                 if(!nerrors++) {
                   ^
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
cross_read.c:110:19: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
  CCLD     cross_read
  CC       freespace.o
  CCLD     freespace
  CC       mf.o
  CCLD     mf
  CC       vds.o
  CCLD     vds
  CC       file_image.o
  CCLD     file_image
  CC       unregister.o
  CCLD     unregister
  CC       cache_logging.o
  CCLD     cache_logging
  CC       cork.o
  CCLD     cork
  CC       swmr.o
  CCLD     swmr
  CC       thread_id.o
  CCLD     thread_id
  CC       timer.o
  CCLD     timer
  CC       version_bounds_1_10.o
  CCLD     version_bounds_1_10
  CC       error_test.o
  CCLD     error_test
  CC       err_compat.o
  CCLD     err_compat
  CC       tcheck_version.o
  CCLD     tcheck_version
  CC       testmeta.o
  CCLD     testmeta
  CC       accum_swmr_reader.o
  CCLD     accum_swmr_reader
  CC       atomic_writer.o
  CCLD     atomic_writer
  CC       atomic_reader.o
  CCLD     atomic_reader
  CC       external_env.o
  CCLD     external_env
  CC       links_env.o
  CCLD     links_env
  CC       filenotclosed.o
  CCLD     filenotclosed
  CC       del_many_dense_attrs.o
  CCLD     del_many_dense_attrs
  CC       flushrefresh.o
  CCLD     flushrefresh
  CC       use_append_chunk.o
  CC       use_common.o
  CCLD     use_append_chunk
  CC       use_append_chunk_mirror.o
  CCLD     use_append_chunk_mirror
  CC       use_append_mchunks.o
  CCLD     use_append_mchunks
  CC       use_disable_mdc_flushes.o
  CCLD     use_disable_mdc_flushes
  CC       swmr_generator.o
  CCLD     swmr_generator
  CC       swmr_start_write.o
  CCLD     swmr_start_write
  CC       swmr_reader.o
  CCLD     swmr_reader
  CC       swmr_writer.o
  CCLD     swmr_writer
  CC       swmr_remove_reader.o
  CCLD     swmr_remove_reader
  CC       swmr_remove_writer.o
  CCLD     swmr_remove_writer
  CC       swmr_addrem_writer.o
  CCLD     swmr_addrem_writer
  CC       swmr_sparse_reader.o
swmr_sparse_reader.c: In function 'read_records':
swmr_sparse_reader.c:262:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             if(HDtime(NULL) >= (time_t)(start_time + (time_t)TIMEOUT)) {
             ^
  CCLD     swmr_sparse_reader
  CC       swmr_sparse_writer.o
  CCLD     swmr_sparse_writer
  CC       swmr_check_compat_vfd.o
  CCLD     swmr_check_compat_vfd
  CC       vds_env.o
vds_env.c: In function 'test_vds_prefix_second':
vds_env.c:51:1: warning: stack usage might be 9600 bytes [-Wstack-usage=]
 test_vds_prefix_second(unsigned config, hid_t fapl)
 ^
  CCLD     vds_env
  CC       vds_swmr_gen.o
  CCLD     vds_swmr_gen
  CC       vds_swmr_reader.o
  CCLD     vds_swmr_reader
  CC       vds_swmr_writer.o
vds_swmr_writer.c: In function 'main':
vds_swmr_writer.c:120:14: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
         while(HDtime(0) < delay)
              ^
  CCLD     vds_swmr_writer
  CC       mirror_vfd.o
  CCLD     mirror_vfd
  CC       filter_plugin.o
  CCLD     filter_plugin
make[1]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/test'
Making all in bin
make[1]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/bin'
make[1]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/bin'
Making all in utils
make[1]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/utils'
Making all in mirror_vfd
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/utils/mirror_vfd'
  CC       mirror_server.o
  CC       mirror_writer.o
  CC       mirror_remote.o
  CCLD     mirror_server
  CC       mirror_server_stop.o
  CCLD     mirror_server_stop
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/utils/mirror_vfd'
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/utils'
make[2]: Nothing to be done for 'all-am'.
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/utils'
make[1]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/utils'
Making all in tools
make[1]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools'
Making all in lib
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/lib'
  CC       h5tools.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
In file included from ../../src/H5Eprivate.h:23:0,
                 from h5tools_error.h:21,
                 from h5tools.h:24,
                 from h5tools.c:19:
h5tools.c: In function 'h5tools_render_element':
../../src/H5private.h:1494:30: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     #define HDstrtok(X,Y)    strtok(X,Y)
                              ^
h5tools.c:1235:25: note: in expansion of macro 'HDstrtok'
              (section = HDstrtok(secnum ? NULL : s, OPTIONAL_LINE_BREAK));
                         ^
h5tools.c: In function 'h5tools_render_region_element':
../../src/H5private.h:1494:30: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     #define HDstrtok(X,Y)    strtok(X,Y)
                              ^
h5tools.c:1393:48: note: in expansion of macro 'HDstrtok'
     for (secnum = 0, multiline = 0; (section = HDstrtok(secnum ? NULL : s, OPTIONAL_LINE_BREAK)); secnum++) {
                                                ^
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5tools_dump.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
h5tools_dump.c: In function 'h5tools_dump_reference':
h5tools_dump.c:3972:39: warning: conversion to 'size_t' from 'int' may change the sign of the result [-Wsign-conversion]
         void *memref = region_buf + i * nsize;
                                       ^
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5tools_str.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
h5tools_str.c: In function 'h5tools_str_sprint':
h5tools_str.c:789:27: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
                         if(quote)
                           ^
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5tools_utils.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5diff.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5diff_array.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
h5diff_array.c: In function 'diff_datum':
h5diff_array.c:466:21: warning: unused variable 'both_zero' [-Wunused-variable]
     hbool_t         both_zero;
                     ^
h5diff_array.c:465:21: warning: unused variable 'per' [-Wunused-variable]
     double          per;
                     ^
h5diff_array.c: In function 'character_compare_opt':
h5diff_array.c:1364:19: warning: variable 'both_zero' set but not used [-Wunused-but-set-variable]
     hbool_t       both_zero = FALSE;
                   ^
h5diff_array.c: In function 'print_pos':
h5diff_array.c:3105:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while (curr_idx >= elmnt_cnt && j >= 0);
                                                     ^
h5diff_array.c:3105:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
                 } while (curr_idx >= elmnt_cnt && j >= 0);
                                                     ^
h5diff_array.c:3105:53: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5diff_attr.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5diff_dset.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5diff_util.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5trav.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5tools_filters.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5tools_ref.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5tools_type.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       io_timer.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libh5tools.la
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/lib'
Making all in src
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src'
Making all in h5diff
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5diff'
  CC       h5diff_main.o
  CC       h5diff_common.o
h5diff_common.c:72:5: warning: "TRILABS" is not defined [-Wundef]
 #if TRILABS-227
     ^
h5diff_common.c: In function 'parse_command_line':
h5diff_common.c:446:5: warning: "TRILABS" is not defined [-Wundef]
 #if TRILABS-227
     ^
  CCLD     h5diff
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5diff'
Making all in h5ls
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5ls'
  CC       h5ls.o
  CCLD     h5ls
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5ls'
Making all in h5dump
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5dump'
  CC       h5dump.o
  CC       h5dump_ddl.o
  CC       h5dump_xml.o
  CCLD     h5dump
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5dump'
Making all in misc
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/misc'
  CC       h5debug.o
  CCLD     h5debug
  CC       h5repart.o
  CCLD     h5repart
  CC       h5mkgrp.o
  CCLD     h5mkgrp
  CC       h5clear.o
  CCLD     h5clear
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/misc'
Making all in h5import
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5import'
  CC       h5import.o
h5import.c: In function 'processStrHDFData':
h5import.c:1126:19: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
             while (j < in->path.count - 1) {
                   ^
h5import.c: In function 'processStrData':
h5import.c:1002:19: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
             while (j < in->path.count - 1) {
                   ^
h5import.c: In function 'main':
h5import.c:4617:27: warning: assuming signed overflow does not occur when simplifying range test [-Wstrict-overflow]
                     while (j < in->path.count - 1) {
                           ^
  CCLD     h5import
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5import'
Making all in h5repack
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5repack'
  CC       h5repack.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5repack_copy.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5repack_filters.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5repack_opttable.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5repack_parse.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
h5repack_parse.c: In function 'parse_filter':
h5repack_parse.c:141:28: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
                         if (l == -1)
                            ^
h5repack_parse.c:191:28: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
                         if (l == -1)
                            ^
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5repack_refs.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
h5repack_refs.c: In function 'copy_refs_attr':
h5repack_refs.c:428:12: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
 static int copy_refs_attr(hid_t loc_in,
            ^
h5repack_refs.c:696:21: warning: assuming signed overflow does not occur when simplifying conditional [-Wstrict-overflow]
                     for (j=0; j<(unsigned)ref_comp_field_n; j++) {
                     ^
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       h5repack_verify.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libh5repack.la
  CC       h5repack_main.o
h5repack_main.c: In function 'main':
h5repack_main.c:746:8: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     if (parse_ret < 0) {
        ^
h5repack_main.c:746:8: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
  CCLD     h5repack
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5repack'
Making all in h5jam
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5jam'
  CC       h5jam.o
  CCLD     h5jam
  CC       h5unjam.o
  CCLD     h5unjam
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5jam'
Making all in h5copy
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5copy'
  CC       h5copy.o
  CCLD     h5copy
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5copy'
Making all in h5format_convert
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5format_convert'
  CC       h5format_convert.o
  CCLD     h5format_convert
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5format_convert'
Making all in h5stat
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5stat'
  CC       h5stat.o
  CCLD     h5stat
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src/h5stat'
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src'
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/src'
Making all in test
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test'
Making all in h5diff
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5diff'
  CC       dynlib_diff.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libdynlibdiff.la
  CC       h5diffgentest.o
h5diffgentest.c: In function 'write_attr_strings':
h5diffgentest.c:5691:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for (l = 0; l < i + 1; l++)
             ^
h5diffgentest.c:6090:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for (l = 0; l < i + 1; l++)
                 ^
h5diffgentest.c: In function 'write_attr_in':
h5diffgentest.c:6681:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for (l = 0; l < i + 1; l++)
             ^
h5diffgentest.c:7082:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for (l = 0; l < i + 1; l++)
                 ^
h5diffgentest.c: In function 'write_dset_in':
h5diffgentest.c:7575:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for (l = 0; l < i + 1; l++) {
             ^
h5diffgentest.c:7754:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for (l = 0; l < i + 1; l++) {
                 ^
  CCLD     h5diffgentest
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5diff'
Making all in h5ls
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5ls'
  CC       dynlib_ls.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libdynlibls.la
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5ls'
Making all in h5dump
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5dump'
  CC       dynlib_dump.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libdynlibdump.la
  CC       h5dumpgentest.o
h5dumpgentest.c: In function 'gent_vldatatypes':
h5dumpgentest.c:2645:9: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
         for(j = 0; j < i + 1; j++)
         ^
h5dumpgentest.c:2672:9: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
         for(j = 0; j < i + 1; j++)
         ^
h5dumpgentest.c: In function 'gent_vldatatypes5':
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(j = 0; j < i + 5; j++)
             ^
h5dumpgentest.c: In function 'gent_array6':
h5dumpgentest.c:3387:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k = 0; k < (i + j + 1); k++)
             ^
h5dumpgentest.c: In function 'gent_array7':
h5dumpgentest.c:3448:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(k = 0; k < (i + j + 1); k++)
             ^
h5dumpgentest.c: In function 'gent_multi':
h5dumpgentest.c:3803:9: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
         memb_addr[mt] = (haddr_t)MAX(mt - 1, 0) * (HADDR_MAX / 10);
         ^
h5dumpgentest.c: In function 'write_attr_in':
h5dumpgentest.c:4195:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(l = 0; l < i + 1; l++)
             ^
h5dumpgentest.c:4327:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for(l = 0; l < i + 1; l++)
                 ^
h5dumpgentest.c: In function 'write_dset_in':
h5dumpgentest.c:4637:13: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
             for(l = 0; l < i + 1; l++)
             ^
h5dumpgentest.c:4776:17: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
                 for(l = 0; l < i + 1; l++)
                 ^
h5dumpgentest.c: In function 'gent_intsfourdims':
h5dumpgentest.c:10242:14: warning: size of 'dset1' is 7680 bytes [-Wlarger-than=]
     uint32_t dset1[F81_ZDIM][F81_YDIM][F81_XDIM][F81_WDIM];
              ^
h5dumpgentest.c: In function 'main':
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             for(j = 0; j < i + 5; j++)
             ^
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
h5dumpgentest.c:2946:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
  CCLD     h5dumpgentest
  CC       binread.o
  CCLD     binread
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5dump'
Making all in misc
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/misc'
Making all in vds
make[4]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/misc/vds'
  CC       UC_1_one_dim_gen.o
  CCLD     UC_1_one_dim_gen
  CC       UC_2_two_dims_gen.o
  CCLD     UC_2_two_dims_gen
  CC       UC_3_gaps_gen.o
  CCLD     UC_3_gaps_gen
  CC       UC_4_printf_gen.o
  CCLD     UC_4_printf_gen
  CC       UC_5_stride_gen.o
  CCLD     UC_5_stride_gen
make[4]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/misc/vds'
make[4]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/misc'
  CC       h5repart_gentest.o
  CCLD     h5repart_gentest
  CC       h5clear_gentest.o
h5clear_gentest.c: In function 'gen_enhance_files':
h5clear_gentest.c:205:5: warning: assuming signed overflow does not occur when reducing constant in comparison [-Wstrict-overflow]
     for(i = 0+u; i < 3+u; i++) {
     ^
  CCLD     h5clear_gentest
  CC       talign.o
  CCLD     talign
  CC       repart_test.o
  CCLD     repart_test
  CC       clear_open_chk.o
  CCLD     clear_open_chk
make[4]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/misc'
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/misc'
Making all in h5import
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5import'
  CC       h5importtest.o
  CCLD     h5importtest
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5import'
Making all in h5repack
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5repack'
  CC       dynlib_rpk.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libdynlibadd.la
  CC       dynlib_vrpk.lo
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libdynlibvers.la
  CC       h5repacktst.o
  CCLD     h5repacktst
  CC       testh5repack_detect_szip.o
  CCLD     testh5repack_detect_szip
  CC       h5repackgentest.o
  CCLD     h5repackgentest
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5repack'
Making all in h5jam
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5jam'
  CC       tellub.o
  CCLD     tellub
  CC       h5jamgentest.o
  CCLD     h5jamgentest
  CC       getub.o
  CCLD     getub
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5jam'
Making all in h5copy
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5copy'
  CC       h5copygentest.o
  CCLD     h5copygentest
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5copy'
Making all in h5format_convert
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5format_convert'
  CC       h5fc_gentest.o
  CCLD     h5fc_gentest
  CC       h5fc_chk_idx.o
  CCLD     h5fc_chk_idx
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5format_convert'
Making all in h5stat
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5stat'
  CC       h5stat_gentest.o
  CCLD     h5stat_gentest
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/h5stat'
Making all in perform
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/perform'
  CC       sio_perf.o
  CC       sio_engine.o
sio_engine.c: In function 'do_sio':
sio_engine.c:141:17: warning: size of 'fname' is 4096 bytes [-Wlarger-than=]
     char        fname[FILENAME_MAX];    /* test file name */
                 ^
sio_engine.c: In function 'set_vfd':
sio_engine.c:1167:14: warning: size of 'sv' is 7168 bytes [-Wlarger-than=]
         char sv[H5FD_MEM_NTYPES][1024];
              ^
sio_engine.c:1181:13: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
             memb_addr[mt] = (haddr_t)MAX(mt - 1,0) * (HADDR_MAX / 10);
             ^
  CCLD     h5perf_serial
  CC       iopipe.o
  CCLD     iopipe
  CC       chunk.o
  CCLD     chunk
  CC       chunk_cache.o
  CCLD     chunk_cache
  CC       overhead.o
  CCLD     overhead
  CC       zip_perf.o
  CCLD     zip_perf
  CC       perf_meta.o
  CCLD     perf_meta
  CC       perf.o
  CCLD     perf
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test/perform'
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test'
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/test'
Making all in libtest
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/libtest'
  CC       h5tools_test_utils.o
  CCLD     h5tools_test_utils
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools/libtest'
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools'
make[2]: Nothing to be done for 'all-am'.
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools'
make[1]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/tools'
Making all in .
make[1]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7'
make[1]: Nothing to be done for 'all-am'.
make[1]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7'
Making all in hl
make[1]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl'
Making all in src
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/src'
  CC       H5DO.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5DS.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5IM.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5LT.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5LTanalyze.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5LTparse.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5PT.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5TB.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
H5TB.c: In function 'H5TBread_fields_name':
H5TB.c:1027:7: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     if(j == 0)
       ^
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CC       H5LD.lo
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
../../libtool: line 1762: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)
  CCLD     libhdf5_hl.la
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/src'
Making all in test
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/test'
  CC       test_lite.o
  CCLD     test_lite
  CC       test_image.o
test_image.c: In function 'read_data':
test_image.c:858:5: warning: assuming signed overflow does not occur when simplifying conditional to constant [-Wstrict-overflow]
     for(i = 0; i < n_elements; i++) {
     ^
  CCLD     test_image
  CC       test_file_image.o
  CCLD     test_file_image
  CC       test_table.o
  CCLD     test_table
  CC       test_ds.o
  CCLD     test_ds
  CC       test_packet.o
  CC       test_packet_vlen.o
  CCLD     test_packet
  CC       test_ld.o
  CCLD     test_ld
  CC       test_dset_append.o
  CCLD     test_dset_append
  CC       test_h5do_compat.o
  CCLD     test_h5do_compat
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/test'
Making all in tools
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/tools'
Making all in gif2h5
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/tools/gif2h5'
  CC       gif2hdf.o
  CC       gif2mem.o
  CC       decompress.o
  CC       gifread.o
  CC       writehdf.o
  CCLD     gif2h5
  CC       hdf2gif.o
  CC       hdfgifwr.o
hdfgifwr.c: In function 'hdfWriteGIF':
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     for ( i += 16; i > 0; i-- )
     ^
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
hdfgifwr.c:412:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
  CCLD     h52gif
  CC       h52gifgentst.o
  CCLD     h52gifgentst
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/tools/gif2h5'
Making all in h5watch
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/tools/h5watch'
  CC       h5watch.o
h5watch.c: In function 'slicendump':
h5watch.c:262:5: warning: assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2 [-Wstrict-overflow]
     if((subrank - 1) > 0) {
     ^
  CCLD     h5watch
  CC       swmr_check_compat_vfd.o
  CCLD     swmr_check_compat_vfd
  CC       h5watchgentest.o
  CCLD     h5watchgentest
  CC       extend_dset-extend_dset.o
  CCLD     extend_dset
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/tools/h5watch'
make[3]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/tools'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/tools'
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl/tools'
make[2]: Entering directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl'
make[2]: Nothing to be done for 'all-am'.
make[2]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl'
make[1]: Leaving directory '/home/wzzhang/library/install_files/hdf5-1.10.7/hl'
